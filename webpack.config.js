/* eslint-disable flowtype/require-valid-file-annotation, flowtype/require-parameter-type */

const path = require('path');
const webpack = require('webpack');
const merge = require('webpack-merge');
const DashboardPlugin = require('webpack-dashboard/plugin');

// Webpack plugins
const HtmlWebpackPlugin = require('html-webpack-plugin');
const TerserWebpackPlugin = require('terser-webpack-plugin');
const CleanWebpackPlugin = require('clean-webpack-plugin');

const host = process.env.HOST || 'localhost';
const port = process.env.PORT || 3000;

// Location of files
const srcFolder = 'src';
const buildFolder = 'dist';

const PATHS = {
    app: path.join(__dirname, srcFolder),
    build: path.join(__dirname, buildFolder),
};

const commonConfig = {
    resolve: {
        modules: [
            srcFolder,
            'node_modules',
        ],
        extensions: [
            '.js',
            '.jsx',
        ],
    },

    output: {
        path: PATHS.build,
        publicPath: '/',
    },

    // Make web variables accessible to webpack, e.g. window
    target: 'web',

    performance: { hints: false },

    stats: 'errors-only',

    module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                use: 'babel-loader',
            }, {
                // For building vendor css files
                test: /\.css$/,
                use: ['style-loader', 'css-loader'],
            }, {
                test: /\.(eot|svg|otf|ttf|woff|woff2)$/,
                use: 'file-loader',
            }, {
                test: /\.(jpe?g|png|gif)$/,
                use: [
                    {
                        loader: 'url-loader',
                        options: {
                            limit: 10000,
                        },
                    },
                ],
            }, {
                test: /\.(mp4|webm)$/,
                loader: 'url-loader',
                query: {
                    limit: 10000,
                },
            },
        ],
    },

    plugins: [],
};

const devConfig = {
    mode: 'development',

    entry: [
        // Hot reload only when compiled successfully
        // require.resolve('webpack/hot/only-dev-server'),

        // Alternative with refresh on failure
        // require.resolve('webpack/hot/dev-server'),

        PATHS.app,
    ],

    output: {
        filename: '[name].js',
        chunkFilename: '[name].chunk.js',
    },

    devtool: 'cheap-module-source-map',

    optimization: {
        // Automatically split vendor and commons
        splitChunks: {
            chunks: 'all',
        },
        // Keep the runtime chunk separated to enable long term caching
        runtimeChunk: true,
    },

    // WebpackDevServer specific
    devServer: {
        host,
        port,

        // respond to 404s with index.html
        historyApiFallback: true,

        // Location of files
        contentBase: PATHS.build,

        stats: 'errors-only',

        // Hot reloading
        // hot: true,
        hotOnly: true,
    },

    plugins: [
        new webpack.DefinePlugin({
            __DEV__: true,
            __PROD__: false,
        }),

        new HtmlWebpackPlugin({
            template: path.join(PATHS.app, 'index.ejs'),
            inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
        }),

        new webpack.HotModuleReplacementPlugin(),

        new DashboardPlugin(),
    ],
};

const prodConfig = {
    mode: 'production',

    entry: [
        // Only polyfill in production
        'babel-polyfill',

        PATHS.app,
    ],

    output: {
        // Utilize long-term caching by adding content hashes (not compilation hashes) to compiled assets
        filename: '[name].[chunkhash].js',
        chunkFilename: '[name].[chunkhash].chunk.js',
    },

    devtool: 'source-map',

    optimization: {
        sideEffects: true,
        concatenateModules: true,

        // Automatically split vendor and commons
        splitChunks: {
            chunks: 'all',
        },
        // Keep the runtime chunk seperated to enable long term caching
        runtimeChunk: true,

        minimize: true,
        minimizer: [
            new TerserWebpackPlugin({
                terserOptions: {
                    parse: { ecma: 8 },
                    compress: {
                        ecma: 5,
                        warnings: false,
                        comparisons: false,
                    },
                    mangle: { safari10: true },
                    output: {
                        ecma: 5,
                        comments: false,
                        ascii_only: true,
                    },
                    parallel: true,
                    cache: true,
                    sourceMap: false,
                }
            })
        ],
    },

    plugins: [
        new CleanWebpackPlugin(['dist']),

        new webpack.DefinePlugin({
            __DEV__: false,
            __PROD__: true,
            'process.env.NODE_ENV': JSON.stringify('production'),
        }),

        // Minify and optimize the index.html
        new HtmlWebpackPlugin({
            template: path.join(PATHS.app, 'index.ejs'),
            minify: {
                removeComments: true,
                collapseWhitespace: true,
                removeRedundantAttributes: true,
                useShortDoctype: true,
                removeEmptyAttributes: true,
                removeStyleLinkTypeAttributes: true,
                keepClosingSlash: true,
                minifyJS: true,
                minifyCSS: true,
                minifyURLs: true,
            },
            inject: true,
        }),
    ],
};

module.exports = (env, argv) => {
    if (argv.mode === 'production') {
        return merge(commonConfig, prodConfig);
    }

    return merge(commonConfig, devConfig);
};
